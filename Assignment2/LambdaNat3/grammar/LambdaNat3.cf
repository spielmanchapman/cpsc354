------------------
-- Lambda Calculus
------------------

Prog.      Program ::= Exp; -- this first line is redundant
EAbs.      Exp1 ::= "\\" Id "." Exp;  -- in effect: "\" Id "." Exp ; -- btw, pronounce "\" as "lambda" in this context
EIf.       Exp2 ::= "if" Exp "=" Exp "then" Exp "else" Exp ;
ELet.      Exp2 ::= "let" Id "=" Exp "in" Exp ;               -- let x = A in B is sugar for (\x.B)A
ERec.      Exp2 ::= "let rec" Id "=" Exp "in" Exp ;
EMinusOne. Exp2 ::= "minus_one" Exp ;                         -- because we do not have pattern matching in LambdaNat
EApp.      Exp3 ::= Exp3 Exp4; -- application associates on the left
ENat0.     Exp4 ::= "0";
ENatS.     Exp4 ::= "S" Exp4;
EVar.      Exp5 ::= Id;
internal EFix. Exp2 ::= "fix" Exp ;                           -- to implement "let rec"




coercions Exp 5 ;

token Id (letter (letter | digit | '_')*) ; -- Identifiers start with a letter followed by any number of letters, digits, or underscores

comment "//" ;
comment "/*" "*/" ;

----------------------------------------------
----------------------------------------------
-- parse the following expressions by running
--   ./TestLambdaNat test.lc
-- in the terminal in the directory where you have TestLambdaNat
-- and where test.lc contains any one of the expressions below.
--
-- Verify that the following statements are correct:
--
-- ((x y) z) equals x y z
-- \x.x x x equals \x. ((x x) x) -- whitespace can usually be ignored but not between the x (why?)
-- (\x.x) x x equals (((\x.x) x) x)
--
-- Btw, I say that two strings are equal if they produce the same parse tree (abstract syntax tree)
----------------------------------------------
----------------------------------------------
